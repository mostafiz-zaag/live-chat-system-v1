// auth.service.ts
import { Injectable } from '@nestjs/common';
import { createCanvas } from 'canvas';
import * as qrcode from 'qrcode';
import * as speakeasy from 'speakeasy';
import { COMPANY_NAME } from '../constants/global.constant';

@Injectable()
export class AuthenticatorService {
    // Generate a secret for the user
    generateSecret(username: string) {
        return speakeasy.generateSecret({
            name: `${COMPANY_NAME} (${username})`,
        });
    }

    // Generate a Google Authenticator-compatible QR code with centered text and return as Buffer
    async generateQrCode(
        url: string,
        centerText: string = 'SCAN ME',
    ): Promise<Buffer> {
        const size = 228; // Size of the QR code image
        const canvas = createCanvas(size, size);
        const context = canvas.getContext('2d');

        // Generate the QR code on the canvas using the URL
        await qrcode.toCanvas(canvas, url, { errorCorrectionLevel: 'H' });

        // Split the center text into multiple lines
        const lines = centerText.split('\n');

        const regularFontSize = 13; // Font size for most lines
        const smallFontSize = 7; // Font size for the second line
        const lineHeight = 15; // Fixed line height for all lines
        const padding = 8;

        // Calculate the maximum width of the text lines
        const maxWidth = Math.max(
            ...lines.map((line, index) => {
                // Set the font size based on the line index
                const fontSize = index === 1 ? smallFontSize : regularFontSize;
                context.font = `bold ${fontSize}px "Roboto", sans-serif`;
                return context.measureText(line).width;
            }),
        );

        const boxWidth = maxWidth + padding * 2;
        const boxHeight = lineHeight * lines.length + padding * 2; // Adjust box height for fixed line height

        const centerX = (size - boxWidth) / 2;
        const centerY = (size - boxHeight) / 2;

        // Draw a white rectangle in the center to clear space for the text
        context.fillStyle = 'white';
        context.fillRect(centerX, centerY, boxWidth, boxHeight);

        // Center the text horizontally and vertically within the box
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.fillStyle = 'black';

        // Calculate the vertical starting position for the first line
        const startY =
            centerY +
            padding +
            (boxHeight - padding * 2) / 2 -
            ((lines.length - 1) * lineHeight) / 2;

        // Draw each line of text with the specified font sizes
        lines.forEach((line, index) => {
            const fontSize = index === 1 ? smallFontSize : regularFontSize; // 5px for the second line, 20px for others
            context.font = `bold ${fontSize}px "Roboto", sans-serif`;

            context.fillText(line, size / 2, startY + index * lineHeight);
        });

        // (The rest of your code for drawing notches remains unchanged...)

        // Convert the canvas to a Buffer and return
        return canvas.toBuffer('image/png');
    }

    // Verify the token generated by Google Authenticator
    async verifyToken(secret: string, token: string): Promise<boolean> {
        return speakeasy.totp.verify({
            secret,
            encoding: 'base32',
            token,
        });
    }
}
